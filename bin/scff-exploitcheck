#!/usr/bin/env python3

import configparser
import hashlib
import os
import shlex
import shutil
from subprocess import call
from sys import argv
from time import sleep

try:
    from afl_utils import afl_collect
    AFL_UTILS = True
except:
    print("WARNING: afl_utils not found! This tool is *much* more useful when" \
          + "afl_utils and the exploitable GDB plugins are installed."
          +  "Get the afl_utils here: https://github.com/rc0r/afl-utils")
    AFL_UTILS = False

MODE = "file"
cfg = configparser.ConfigParser()
reals = []
falsepositives = []
hashes = []
dupes = []
verbose = False
quiet = False
FNULL = open(os.devnull)
findings_dir = "findings/crashes"
out_dir = "crashes" # TODO: not in effect right now

def usage():
    print("scff-exploitcheck - analyzes afl findings")
    print("Usage:", argv[0], "[FUZZ-CONFIG-FILE] [FINDINGS_DIR] [-v|-q]")
    exit()

if "-v" in argv or "verbose" in argv:
    verbose = True
if "-h" in argv or "help" in argv:
    usage()
if "-q" in argv or "quiet" in argv:
    quiet = True

try:
    conffile = argv[1]
except:
    conffile = "scff.proj"

if not os.path.isfile(conffile):
    print("ERROR: Can't open", conffile)
    exit(1)
try:
    cfg.read(conffile)
except:
    print("ERROR:", conffile, "is not a valid scff project file!")
    exit(2)

try:
    args = cfg['FUZZING']['args']
    targ = cfg['FUZZING']['target']
except:
    print("ERROR:", conffile,"is missing required fields (target and args)")
    exit(2)

try:
    if argv[2] != "-v" and argv[2] != "-q":
        findings_dir = argv[2]
except:
    pass

if args.find("@@") != -1:
    args = args.replace("@@", ".finding")
else:
    MODE = "stdin"


if targ.startswith("~"):
    targ = os.path.expanduser("~") + targ[1:]

if os.path.isfile(targ):
    if not targ.startswith("/"):
        targ = "./" + targ
    print("Target OK!")
else:
    print("Can not find", targ)
    exit(3)

cmd = shlex.split(targ + " " +args)
print("Call:", cmd, " --  Mode:", MODE)


if os.path.exists(findings_dir):
    pass
else:
    print(findings_dir, "does not exist!\n" \
    + "Grab crashes with: scff-ctrl " + conffile + " grab-findings")
    exit(4)


print("Testing...\n")

i = 0
for finding in os.listdir(findings_dir):
    i += 1
    #, 0 for unbuffered opening to make stdin work when printed contents before
    # however this does not seem to work. :/ :\
    with open(findings_dir+"/"+finding, 'rb', 0) as findingfile: # this is
        sleep(0.02)
        hasher = hashlib.sha1()
        hasher.update(findingfile.read())
        h = hasher.hexdigest()
        if verbose:
            print("Hash:", h)
        if h in hashes:
            if not quiet:
                print("Duplicate!")
            dupes.append(finding)
            continue
        else:
            hashes.append(h)
        findingfile.seek(0)
#    with open(findings_dir+"/"+finding, 'rb', 0) as findingfile: # just
        if MODE == "file":
            arg = args.replace(".finding", findings_dir + "/" +finding)
            cmd = shlex.split(targ + " " +arg)
            if not quiet:
                print(cmd)
            ret = call((cmd), stdout=FNULL, stderr=FNULL)
        else:
            cmd = shlex.split(targ + " " +args)
            if verbose:
                ret = call((cmd), stdin=findingfile)
            else:
                ret = call((cmd), stdin=findingfile, stdout=FNULL, stderr=FNULL)
#    with open(findings_dir+"/"+finding, 'rb', 0) as findingfile: # the worst
        findingfile.seek(0)
        crashstr = findingfile.read()
        if not quiet:
            print("[%s] %s < %s" % (i, cmd, crashstr[:20]))

    #print("RETURN CODE:", ret)
    if ret == 0 or ret == 1:
        if not quiet:
            print("-" * 5, " no crash!")
        falsepositives.append(finding)
    else:
        if not quiet:
            print("+" * 5, " CRASH!")
        reals.append(finding)

print("_" * 20 + "Summary________________________________________________")
if len(dupes) > 0:
    print(len(dupes), "duplicates")
    if os.path.exists("crashes/duplicates"):
        print("Warning: duplicates directory already exists!")
    else:
        os.makedirs("crashes/duplicates")

for duplicate in dupes:
    if verbose:
        print(" =", duplicate)
    shutil.copy(findings_dir + "/" + duplicate, "crashes/duplicates")

if len(falsepositives) > 0:
    print(len(falsepositives), "false positives")
    if os.path.exists("crashes/false-positives"):
        print("Warning: false-positives directory already exists!")
    else:
        os.makedirs("crashes/false-positives")

for falsepositive in falsepositives:
    if verbose:
        print(" -", falsepositive)
    shutil.copy(findings_dir + "/" + falsepositive, "crashes/false-positives")

print(len(reals), "crashes")
if len(reals) > 0:
    if os.path.exists("crashes/crashes"):
        print("Warning: crashes directory already exists!")
    else:
        os.makedirs("crashes/crashes")
for crash in reals:
    if verbose:
        print(" *", crash)
    shutil.copy(findings_dir + "/" + crash, "crashes/crashes")

if AFL_UTILS:
    print("_" * 20 + "Exploitability_check___________________________________")
    call(("touch", "crashes/fuzzer_stats")) # required for afl-collect
    target_cmd = targ + " " + cfg['FUZZING']['args']
    afl_collect.main([".", "crashes", "crashes", "-e", "GDB", "--", target_cmd])
    print("Run: cd crashes && gdb < GDB for more crash details.")

